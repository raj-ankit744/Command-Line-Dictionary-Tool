#!/usr/bin/env node
const  genController = require('./Controllers/general');
const gameController = require('./Controllers/game');
const output = require('./Controllers/stringOutput');
const program = require('commander')

program
    .version('0.0.1')
    .description('Dictionary Tool');
program
    .arguments('[option] [word]')
    .action(async (option, word) => {
        let res = '';
        switch(option) {
            case 'def' : try {
                res = output.outputDefinition(await genController.getDefinitions(word));
            }
            catch(error) {
                console.log(error);
            }
            break;
            case 'syn' : try {
                res = output.outputSynonym(await genController.getSynonyms(word));
            }
            catch(error) {
                console.log(error);
            }
            break;
            case 'ant' : try {
                res = output.outputAntonym(await genController.getAntonyms(word));
            }
            catch(error) {
                console.log(error);
            }
            break;
            case 'ex'  : try {
                res = output.outputExamples(await genController.getExamples(word));
            }
            catch(error) {
                console.log(error);
            }
            break;
            case 'dict': try {
                res = output.outputFullDict(await genController.getFullDict(word));
            }
            catch(error) {
                console.log(error);
            }
            break;
            case 'play': try {
                res = await gameController.playGame();
            }
            catch(error) {
                console.log(error);
            }
            break;
            default    :
                         if(!option)
                            try {
                                res = output.outputWordOfTheDay(await genController.getWordOfTheDay());
                            }
                            catch(error) {
                                console.log(error);
                            }
                         else
                            try {
                                res = output.outputFullDict(await genController.getFullDict(option));
                            }
                            catch(error) {
                                console.log(error);
                            }
        };
        console.log(res);
    });
program.parse(process.argv);